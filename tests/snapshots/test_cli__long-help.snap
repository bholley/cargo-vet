---
source: tests/test-cli.rs
expression: format_outputs(&output)
---
stdout:
cargo-vet 0.1.0
Supply-chain security for Rust

When run without a subcommand, `cargo vet` will invoke the `check` subcommand. See `cargo vet help
check` for more details.

USAGE:
    cargo vet [OPTIONS]
    cargo vet <SUBCOMMAND>

OPTIONS:
        --shallow
            Avoid suggesting audits for dependencies of unaudited dependencies.
            
            By default, if a dependency doesn't have sufficient audits for *itself* then we try to
            speculate that its dependencies require the criteria. This flag disables that behaviour,
            causing only suggestions which we're certain of the requirements for to be emitted.

    -h, --help
            Print help information

    -V, --version
            Print version information

GLOBAL OPTIONS:
        --manifest-path <PATH>
            Path to Cargo.toml

        --no-all-features
            Don't use --all-features
            
            We default to passing --all-features to `cargo metadata` because we want to analyze your
            full dependency tree

        --no-default-features
            Do not activate the `default` feature

        --features <FEATURES>
            Space-separated list of features to activate

        --locked
            Do not fetch new imported audits

        --frozen
            Avoid the network entirely, requiring either that the cargo cache is populated or the
            dependencies are vendored. Requires --locked

        --verbose <VERBOSE>
            How verbose logging should be (log level)
            
            [default: warn]
            [possible values: off, error, warn, info, debug, trace]

        --output-file <OUTPUT_FILE>
            Instead of stdout, write output to this file

        --log-file <LOG_FILE>
            Instead of stderr, write logs to this file (only used after successful CLI parsing)

        --output-format <OUTPUT_FORMAT>
            The format of the output
            
            [default: human]
            [possible values: human, json]

        --diff-cache <DIFF_CACHE>
            Use the following path as the diff-cache
            
            The diff-cache stores the summary results used by vet's suggestion machinery. This is
            automatically managed in vet's tempdir, but if you want to manually store it somewhere
            more reliable, you can.
            
            This mostly exists for testing vet itself.

        --filter-graph <FILTER_GRAPH>
            Filter out different parts of the build graph and pretend that's the true graph
            
            Example: `--filter-graph="exclude(any(eq(is_dev_only(true)),eq(name(serde_derive))))"`
            
            This mostly exists to debug or reduce projects that cargo-vet is mishandling.
            Combining this with `cargo vet --output-format=json dump-graph` can produce an
            input that can be added to vet's test suite.
            
            
            The resulting graph is computed as follows:
            
            1. First compute the original graph
            2. Then apply the filters to find the new set of nodes
            3. Create a new empty graph
            4. For each workspace member that still exists, recursively add it and its dependencies
            
            This means that any non-workspace package that becomes "orphaned" by the filters will
            be implicitly discarded even if it passes the filters.
            
            Possible filters:
            
            * `include($query)`: only include packages that match this filter
            * `exclude($query)`: exclude packages that match this filter
            
            
            Possible queries:
            
            * `any($query1, $query2, ...)`: true if any of the listed queries are true
            * `all($query1, $query2, ...)`: true if all of the listed queries are true
            * `not($query)`: true if the query is false
            * `$property`: true if the package has this property
            
            
            Possible properties:
            
            * `name($string)`: the package's name (i.e. `serde`)
            * `version($version)`: the package's version (i.e. `1.2.0`)
            * `is_root($bool)`: whether it's a root in the original graph (ignoring dev-deps)
            * `is_workspace_member($bool)`: whether the package is a workspace-member (can be
            tested)
            * `is_third_party($bool)`: whether the package is considered third-party by vet
            * `is_dev_only($bool)`: whether it's only used by dev (test) builds in the original
            graph

SUBCOMMANDS:
    check
            [default] Check that the current project has been vetted
    init
            Initialize cargo-vet for your project
    accept-criteria-change
            Accept changes that a foreign audits.toml made to their criteria
    inspect
            Fetch the source of `$package $version`
    diff
            Yield a diff against the last reviewed version
    certify
            Mark `$package $version` as reviewed
    add-unaudited
            Mark `$package $version` as unaudited
    record-violation
            Mark `$package $version` as a violation of policy
    suggest
            Suggest some low-hanging fruit to review
    fmt
            Reformat all of vet's files (in case you hand-edited them)
    fetch-imports
            Explicitly fetch the imports (foreign audit files)
    regenerate-unaudited
            Regenerate the 'unaudited' entries to try to minimize them and make the vet pass
    dump-graph
            Print a mermaid-js visualization of the cargo build graph as understood by cargo-vet
    gc
            Clean up old packages from the vet cache
    help
            Print this message or the help of the given subcommand(s)

stderr:

