---
source: tests/test-cli.rs
expression: format_outputs(&output)
---
stdout:
cargo-vet 0.1.0
Supply-chain security for Rust

USAGE:
    cargo vet [OPTIONS]
    cargo vet <SUBCOMMAND>

OPTIONS:
        --shallow    Avoid suggesting audits for dependencies of unaudited dependencies
    -h, --help       Print help information
    -V, --version    Print version information

GLOBAL OPTIONS:
        --manifest-path <PATH>
            Path to Cargo.toml

        --no-all-features
            Don't use --all-features

        --no-default-features
            Do not activate the `default` feature

        --features <FEATURES>
            Space-separated list of features to activate

        --locked
            Do not fetch new imported audits

        --frozen
            Avoid the network entirely, requiring either that the cargo cache is populated or the
            dependencies are vendored. Requires --locked

        --verbose <VERBOSE>
            How verbose logging should be (log level) [default: warn] [possible values: off, error,
            warn, info, debug, trace]

        --output-file <OUTPUT_FILE>
            Instead of stdout, write output to this file

        --log-file <LOG_FILE>
            Instead of stderr, write logs to this file (only used after successful CLI parsing)

        --output-format <OUTPUT_FORMAT>
            The format of the output [default: human] [possible values: human, json]

        --diff-cache <DIFF_CACHE>
            Use the following path as the diff-cache

        --filter-graph <FILTER_GRAPH>
            Filter out different parts of the build graph and pretend that's the true graph

SUBCOMMANDS:
    check                     [default] Check that the current project has been vetted
    init                      Initialize cargo-vet for your project
    accept-criteria-change    Accept changes that a foreign audits.toml made to their criteria
    inspect                   Fetch the source of `$package $version`
    diff                      Yield a diff against the last reviewed version
    certify                   Mark `$package $version` as reviewed
    add-unaudited             Mark `$package $version` as unaudited
    record-violation          Mark `$package $version` as a violation of policy
    suggest                   Suggest some low-hanging fruit to review
    fmt                       Reformat all of vet's files (in case you hand-edited them)
    fetch-imports             Explicitly fetch the imports (foreign audit files)
    regenerate-unaudited      Regenerate the 'unaudited' entries to try to minimize them and
                                  make the vet pass
    dump-graph                Print a mermaid-js visualization of the cargo build graph as
                                  understood by cargo-vet
    gc                        Clean up old packages from the vet cache
    help                      Print this message or the help of the given subcommand(s)

stderr:

